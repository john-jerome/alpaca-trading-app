import requests
import json
import time
import configparser
import sys
import pandas as pd

from sqlite3 import Error

sys.path.insert(0,'modules')

from database import create_connection, insert_one_row, close_connection, generate_ts, unix_to_ts
from tg_notifications import send_message

config = configparser.ConfigParser()
config.read('config.ini')

db = config['sqlite']['database']

api_key = config['lemon-markets']['api_key']
headers = {'Authorization': 'Token ' + str(api_key)}
account_uuid = config['lemon-markets']['account_uuid']
valid_until = config['lemon-markets']['valid_until_ts']

def create_order(db_conn, instrument, side, quantity, valid_until, type, limit_price = None, stop_price = None):
    """Create an order using the API

    Args:
        instrument (string): ISIN of an instrument
        side (string): "buy" or "sell"
        quantity (integer): number of shares to buy/sell
        valid_until (number): Standard UTC UNIX Timestamp.
        type (string): market, stop_market, limit, stop_limit
        limit_price (float): 
        stop_price (float): 

    Returns:
        None
    """

    url = "https://api.lemon.markets/rest/v1/accounts/{}/orders/".format(account_uuid)
    
    payload = {}

    payload['instrument'] = str(instrument)
    payload['side'] = str(side)
    payload['quantity'] = str(quantity)
    payload['valid_until'] = str(valid_until)
    payload['type'] = str(type)
    if limit_price is not None:
        payload['limit_price'] = limit_price or None
    if stop_price is not None:
        payload['stop_price'] = stop_price or None

    current_ts = generate_ts().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    response = requests.request("POST", url, headers=headers, data=payload)
    
    if response.status_code in [200, 201]:

        response_dict = response.json()

        valid_until = unix_to_ts(response_dict['valid_until'])

        send_message(action = 'create',\
            instrument = instrument, order_type = response_dict['type'],\
                side = response_dict['side'], time = current_ts,\
                     valid_until = valid_until,price = limit_price,\
                          quantity = quantity)

        print("Order {} has been successfully created.".format(response_dict['uuid']))

        row = (
            response_dict['uuid'],
            instrument,
            response_dict['status'],
            response_dict['side'],
            response_dict['quantity'],
            None, 
            response_dict['type'],
            limit_price,
            stop_price,
            current_ts
        )
        insert_one_row(db_conn, row, table = 'orders')
    
    else:
        print("Error {}: {}".format(response.status_code, response.reason))

    return None

def verify_order_execution(db_conn, order_uuid):
    """Verify order execution given its uuid. 
       If executed or expired, add a record to the orders table.

    Args:
        order_uuid (string): order uuid generated by lemons.market

    Returns:
        status (boolean): True if executed. False otherwise
    """

    url = "https://api.lemon.markets/rest/v1/accounts/{}/orders/{}/".format(account_uuid, order_uuid)
    
    response = requests.request("GET", url, headers=headers)

    if response.status_code in [200, 201]:

        response_dict = response.json()
        ts = unix_to_ts(response_dict['processed_at'] or response_dict['valid_until'])

        price = response_dict['average_price'] or response_dict['limit_price']

        row = (
            response_dict['uuid'],
            response_dict['instrument']['isin'],
            response_dict['status'],
            response_dict['side'],
            response_dict['quantity'],
            price, 
            response_dict['type'],
            None,
            None,
            ts
        )
        
        if response_dict['status'] == 'executed':
            status = True
            insert_one_row(db_conn, row, table = 'orders')
            print("Order {} has been executed!".format(order_uuid))

            send_message(action='execute', order_type = response_dict['type'], side = response_dict['side'],\
                 instrument=response_dict['instrument']['isin'], time=ts,\
                    price=response_dict['average_price'], quantity=response_dict['quantity'])

        elif response_dict['status'] == 'expired':
            status = False
            insert_one_row(db_conn, row, table = 'orders')
            print("Order {} has expired!".format(order_uuid))

        else:
            status = False
            print("Order {} is still open!".format(order_uuid))

    else:
        print("Order {} could not be verified!".format(order_uuid))
        status = False

    return status

def get_current_portfolio():
    """List all portfolio positions grouped by instrument

    Returns:
        pandas df: dataframe with results
    """

    url = "https://api.lemon.markets/rest/v1/accounts/{}/portfolio/aggregated".format(account_uuid)
    response = requests.request("GET", url, headers=headers)

    if response.status_code in [200, 201]:
        portfolio = response.json()
        df_list = []

        for instrument in portfolio:
            payload = {}
            payload['isin'] = instrument['instrument']['isin']
            payload['quantity'] = instrument['quantity']
            payload['price'] = instrument['average_price']
            df_list.append(payload)
        
        df = pd.DataFrame(df_list, columns = ['isin', 'quantity', 'price'])
        
        return df
    
    else:
        return None

def delete_order(db_conn, order_uuid):
    """Delete an order by its uuid

    Args:
        order_uuid (string): order uuid assigned by lemon.markets

    Returns:
        None
    """

    url = "https://api.lemon.markets/rest/v1/accounts/{}/orders/{}/".format(account_uuid, order_uuid)
    response = requests.request("DELETE", url, headers=headers)

    if response.status_code == 204:
        print("Order {} has been deleted!".format(order_uuid))

        # replace by deleting the record from the db?

        sql_delete = """DELETE FROM orders WHERE uuid = '{}'""".format(order_uuid)
        cur = db_conn.cursor()

        try:
            cur.execute(sql_delete)
            db_conn.commit()
        except Error as e:
            print(e)
        
    return None
